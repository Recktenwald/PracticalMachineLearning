file.create("assignment.Rmd")
library(ggplot2)
library(ggplot2)
library(caret)
library(dplyr)
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
nrow(training)
View(training)
training <- training[,-1]
testing <- testing[,-1]
names(training)
View(.Last.value)
lm(classe~new_window, data = training)
lm(factor(classe)~factor(new_window), data = training)
summary(.Last.value)
any(is.na(training$new_window))
any(is.na(training$classe))
glm(factor(classe)~factor(new_window), data = training,method="binomial")
qplot(data = training, x = new_window, y = classe)
qplot(data = training, x = classe, color=new_window)
training <- training[,-1:4]
training <- training[,-c(1:4)]
View(names(training))
View(names(testing))
library(ggplot2)
library(caret)
library(dplyr)
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- training[,-(1:7)]
testing <- testing[,-(1:7)]
View(names(training))
prComp <- prcomp(training[,-length(training)])
typeof(training[,2])
class(training[,2])
class(training[,150])
View(training)
class(training[,153])
?prcomp
prComp <- prcomp(training[,-153],na.action=na.omit)
prComp
colMean(training[,-153])
colMeans(training[,-153])
colMeans(training[,1:2])
colMeans(training[,3:10])
temp <- training$kurosis_roll_belt %>% as.numeric
View(temp)
temp <- training$kurosis_roll_belt
View(temp)
training$kurtosis_roll_belt
temp <- training$kurtosis_roll_belt
View(temp)
temp <- as.numeric(temp)
y <- training$classe
ytest <- testing$classe
ncol(trainign)
ncol(training)
training <- training[,-ncol(training)]
testing <- testing[,-ncol(testing)]
?apply
temp <- apply(training,2,as.numeric)
View(temp)
prComp <- prcomp(trainign)
prComp <- prcomp(training)
for (k in 1:ncol(training)){}
for (k in 1:ncol(training)){classe(training[[k]])}
for (k in 1:ncol(training)){class(training[[k]])}
for (k in 1:ncol(training)){print(class(training[[k]]))}
for (k in 1:ncol(training)){print(paste(k,class(training[[k]])))}
for (k in 1:ncol(training)){print(class(temp[[k]]))}
prComp <- prcomp(temp)
training <- apply(training,2,as.numeric)
training <- apply(training,2,as.numeric)
testing <- apply(testing,2,as.numeric)
training <- data.frame(training,classe=y)
View(trainign)
View(ttraining)
View(training)
testing <- data.frame(apply(testing,2,as.numeric),classe=ytest)
testing <- data.frame(testing,classe=ytest)
nrow(testing)
length(ytest)
testing <- read.csv('pml-testing.csv')
View(testing)
testing <- testing[,-(1:7)]
fitlda <- train(data=training,classe~.,method="lda")
fitlda <- train(data=training,classe~.,method="rf")
is.na(training$classe) %>% any
preObj <- preProcess(training[,-ncol(training)],method=c("center","scale"))
sum(training$amplitude_yaw_belt,na.rm = TRUE)
View(testing)
all(is.na(training$amplitude_yaw_belt))
t <- training$amplitude_yaw_belt
View(t[!is.na(t)])
raw_training <- read.csv('pml-training.csv')
View(raw_training$amplitude_yaw_belt)
for (k in 1:ncol(training)){
if (sum(training[[k]],na.rm = TRUE)==0){print(k)}
}
View(raw_training[[7]])
for (k in 1:ncol(training)){
if (sum(training[[k]],na.rm = TRUE)==0){print(names(training)[k])}
}
View(raw_training)
basically_empty <- function(df){
res <- c()
for (k in 1:ncol(df))
if (class(df[[k]])=="numeric"){
if (sum(df[[k]],na.rm=TRUE) == 0){
res <- c(res,k)
}
}
res
}
basically_empty(training)
training <- training[,-basically_empty(training)]
prComp <- prComp(training)
prComp <- prcomp(training[,-"classe"])
prComp <- prcomp(training[,-ncol(training)])
apply(training[,-153],2,sum,na.rm=TRUE)
apply(training[,-153],2,typeof)
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
basically_empty <- function(df){
res <- c()
for (k in 1:ncol(df))
if (class(df[[k]])=="numeric"){
if (sum(df[[k]],na.rm=TRUE) == 0){
res <- c(res,k)
}
}
res
}
training <- training[,-basically_empty(training)]
apply(training,2,typeof)
View(training)
apply(training,2,class)
apply(training[,-153],sum,na.rm=T)
apply(training[,-153],2,sum,na.rm=T)
apply(training[,1:10],2,sum,na.rm=T)
apply(training[,11:30],2,sum,na.rm=T)
apply(training[,31:100],2,sum,na.rm=T)
apply(training[,100:152],2,sum,na.rm=T)
apply(training[,100:143],2,sum,na.rm=T)
prComp <- prcomp(training[,-ncol(training)])
apply(training[,-144],2,sum,na.rm=T)
preProc <- preProcess(training[,-ncol(training)],method="pca",pcaComp = 2)
preProc <- preProcess(training[,-ncol(training)],method="pca",pcaComp = 60)
pcaPre <- predict(preProc,training[,-ncol(training)])
View(pcaPre)
sum(is.na(pcaPre[[1]]))
library(MASS)
fit <- glm(training,classe~.,family=multinomial)
?glm
fitRF <- train(data=training,classe~.,method="rf")
fitRf
fitRF <- train(data=training,classe~.,method="rf",na.action=na.omit)
fitRF
temp <- testing[,names(training)]
temp <- testing[[names(training)]]
View(testing)
testing <- apply(testing,2,as.numeric)
testing <- testing[,-basically_empty(training)]
View(testing)
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- apply(testing,2,as.numeric)
basically_empty <- function(df){
res <- c()
for (k in 1:ncol(df))
if (class(df[[k]])=="numeric"){
if (sum(df[[k]],na.rm=TRUE) == 0){
res <- c(res,k)
}
}
res
}
to_remove <- basically_empty(training)
training <- training[,-to_remove]
testing <- testing[,-to_remove]
names(testing)==names(training)
names(testing)
testing
View(testing)
View(training)
names(testing)
names(testing)
names(training)
class(testing)
typeof(testing)
ncol(testing)
t <- testing
names(t)
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
names(testing)
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- apply(testing,2,as.numeric)
names(testing)
names(training)
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- data.frame(apply(testing,2,as.numeric))
names(testing)
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- data.frame(apply(testing,2,as.numeric))
basically_empty <- function(df){
res <- c()
for (k in 1:ncol(df))
if (class(df[[k]])=="numeric"){
if (sum(df[[k]],na.rm=TRUE) == 0){
res <- c(res,k)
}
}
res
}
to_remove <- basically_empty(training)
training <- training[,-to_remove]
testing <- testing[,-to_remove]
names(testing)==names(training)
fitLDA <- train(data=training, class~.,method="lda")
fitLDA <- train(data=training, class~.,method="rf")
View(training)
class(training)
fitLDA <- train(data=training, classe~.,method="lda")
fitLDA <- train(data=training, classe~.,method="lda",na.action=na.omit)
warnings()
summary(fitLDA)
fitLDA
fitlasso <- train(training,classe~.,method="lasso")
fitlasso <- train(training,factor(classe)~.,method="lasso")
training$classe <- as.factor(training$classe)
fitlasso <- train(training,classe~.,method="lasso")
fitlasso <- train(data=training,classe~.,method="lasso")
library(e17071)
library(e1071)
fitlasso <- train(data=training,classe~.,method="lasso",na.action=na.omit)
inTrain = createDataPartition(trainin$classe, p = 3/4)[[1]]
inTrain = createDataPartition(training$classe, p = 3/4)[[1]]
train <- training[inTrain,]
vali <- training[-inTrain,]
rfAll <- train(data=train, classe~.,method="rf",na.action=na.omit)
varImp
varImp(rfAll)
View(varImp(rfAll))
varImp(rfAll)[["importance"]][["Overall"]]
View(.Last.value)
plot(varImp(rfAll))
rfAll <- train(data=train, classe~.,method="rf",na.action=na.omit)
plot(varImpf(rfAll))
plot(varImp(rfAll))
varImp(rfAll)>45
importance <- varImp(rfAll)
importance$importance>45
test <- names(training)[1:10]
test
fitTest <- train(data=training,classe~test,method="rf",na.action=na.omit)
test
dep <- paste(test,sep=" + ")
dep
dep <- paste(test,collapse=" + ")
dep
fml <- paste0("classe ~ ",dep)
fml
form <- formula(fml)
form
fittest <- train(data=training,form,method="rf",na.action=na.omit)
i <- importance$importance>45
i[1]
names(i)
row.names(i)
row.names(i)[i]
i
View(i)
View(names(training))
important_variables <- names(training)[varImp(rfAll)$importance>45]
length(important_variables)
important_variables <- names(training)[varImp(rfAll)$importance>40]
length(important_variables)
fml <- formula(paste0("classe ~ ",pase(important_variables,collapse=" + ")))
fml <- formula(paste0("classe ~ ",parse(important_variables,collapse=" + ")))
d <- parse(important_variables,collapse=" + ")
important_variables
paste(important_variables,collapse=" + ")
fml <- formula(paste0("classe ~ ",paste(important_variables,collapse=" + ")))
important_variables <- names(training)[varImp(rfAll)$importance>40]
fml <- formula(paste0("classe ~ ",paste(important_variables,collapse=" + ")))
fml
rfImportant <- train(data=train,fml,method="rf",na.action=na.omit)
important_variables
length(varImp(rfAll)$importance)
varImp(rfAll)$importance
nrow(.Last.value)
important_variables <- names(training[,-144])[varImp(rfAll)$importance>40]
fml <- formula(paste0("classe ~ ",paste(important_variables,collapse=" + ")))
rfImportant <- train(data=train,fml,method="rf",na.action=na.omit)
predAll <- predict(rfAll,vali)
sum(predAll==vali$classe)/length(vali$classe)
length(vali$classe)
lengtH(predAll)
length(predAll)
View(predAll)
View(vali)
rfImportant <- train(data=train,fml,method="rf",na.action=na.roughfix)
randomForest
library(randomForest)
?randomForest
View(testing)
predict(rfAll,testing)
?predict
rfAll
rfImportant
length(predAll)
length(predImp)
predImp <- predict(rfImportant,vali)
length(predImp)
View(predAll)
calc_acc(actual = vali$classe,
predicted = predict(rfAll, newdata = vali))
?calc_acc
valid[,important_variables]
vali[,important_variables]
View(.Last.value)
na.omit(training)
nrow(.Last.value)
View(na.omit(training))
nrow(na.omit(vali))
sum((na.omit(vali)$classe == predAll))/length(predAll)
sum((na.omit(vali[,important_variables])$classe == predImp))/length(predImp)
sum((na.omit(vali[,important_variables])$classe == predImp))
vali[,important_variables] %>% head
vali[,important_variables] %>% na.omit %>% head
vali[,important_variables] %>% na.omit %>% nrow()
sum((na.omit(vali[,c(important_variables,classe)])$classe == predImp))/length(predImp)
sum((na.omit(vali[,c(important_variables,"classe")])$classe == predImp))/length(predImp)
predAll <- predict(rfAll,vali)
predImp <- predict(rfImportant,vali)
sum((na.omit(vali)$classe == predAll))/length(predAll)
sum((na.omit(vali[,c(important_variables,"classe")])$classe == predImp))/length(predImp)
gbmImp <- train(data=training, fml,method="gbm")
rfImp <- train(data=training, fml,method="rf",na.action=na.omit)
gbmImp <- train(data=training, fml,method="gbm",na.action=na.omit)
rfPred <- predict(rfImp, newdata=training)
gbmPred <- predict(gbmImp, newdata=training)
length(rfPred)
length(gbmPred)
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=na.omit(training[,c(important_variables,"classe")]))
combinedFit <- train(data=preds,classe~rf+gbm,method="lm")
View(preds)
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=na.omit(training[,c(important_variables,"classe")]$classe))
nrow(na.omit(training[,c(important_variables,"classe")])
)
temp <- na.omit(training[,c(important_variables,"classe")]$classe
temp <- na.omit(training[,c(important_variables,"classe")])
temp <- na.omit(training[,c(important_variables,"classe")])
View(temp)
temp <- na.omit(training[,c(important_variables,"classe")])$classe
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=temp))
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=temp)
View(preds)
sum(preds$rf != preds$gbm)
sum(preds$rf != preds$classe)
na.omit(training)
nrow(na.omit(train))
combinedFit <- train(data=preds,classe~rf+gbm,method="lm")
combinedFit <- train(data=preds,classe~rf+gbm,method="rf")
?rfImpute
impTrain <- training[,c(important_variables,"classe")]
rfImpute(x=impTrain[,-c("classe")],y=impTrain$classe)
impTrain <- training[,c(important_variables,"classe")]
View(impTrain)
impTrain[,-"classe"]
impTrain[,-c("classe")]
rfImpute(x=impTrain[,-ncol(impTrain)],y=impTrain$classe)
temp <- rfImpute(x=impTrain[,-ncol(impTrain)],y=impTrain$classe)
for (k in 1:ncol(training)){
m <- mean(training[[k]],na.rm=TRUE)
training[[k]][is.na(training[[k]])] <- m
}
View(training)
nrow(na.omit(training))
for (k in 1:ncol(training[,-ncol(training)])){
m <- mean(training[[k]],na.rm=TRUE)
training[[k]][is.na(training[[k]])] <- m
}
any(is.na(training))
