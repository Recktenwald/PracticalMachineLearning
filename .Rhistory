}
res
}
to_remove <- basically_empty(training)
training <- training[,-to_remove]
testing <- testing[,-to_remove]
names(testing)==names(training)
names(testing)
testing
View(testing)
View(training)
names(testing)
names(testing)
names(training)
class(testing)
typeof(testing)
ncol(testing)
t <- testing
names(t)
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
names(testing)
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- apply(testing,2,as.numeric)
names(testing)
names(training)
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- data.frame(apply(testing,2,as.numeric))
names(testing)
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- data.frame(apply(testing,2,as.numeric))
basically_empty <- function(df){
res <- c()
for (k in 1:ncol(df))
if (class(df[[k]])=="numeric"){
if (sum(df[[k]],na.rm=TRUE) == 0){
res <- c(res,k)
}
}
res
}
to_remove <- basically_empty(training)
training <- training[,-to_remove]
testing <- testing[,-to_remove]
names(testing)==names(training)
fitLDA <- train(data=training, class~.,method="lda")
fitLDA <- train(data=training, class~.,method="rf")
View(training)
class(training)
fitLDA <- train(data=training, classe~.,method="lda")
fitLDA <- train(data=training, classe~.,method="lda",na.action=na.omit)
warnings()
summary(fitLDA)
fitLDA
fitlasso <- train(training,classe~.,method="lasso")
fitlasso <- train(training,factor(classe)~.,method="lasso")
training$classe <- as.factor(training$classe)
fitlasso <- train(training,classe~.,method="lasso")
fitlasso <- train(data=training,classe~.,method="lasso")
library(e17071)
library(e1071)
fitlasso <- train(data=training,classe~.,method="lasso",na.action=na.omit)
inTrain = createDataPartition(trainin$classe, p = 3/4)[[1]]
inTrain = createDataPartition(training$classe, p = 3/4)[[1]]
train <- training[inTrain,]
vali <- training[-inTrain,]
rfAll <- train(data=train, classe~.,method="rf",na.action=na.omit)
varImp
varImp(rfAll)
View(varImp(rfAll))
varImp(rfAll)[["importance"]][["Overall"]]
View(.Last.value)
plot(varImp(rfAll))
rfAll <- train(data=train, classe~.,method="rf",na.action=na.omit)
plot(varImpf(rfAll))
plot(varImp(rfAll))
varImp(rfAll)>45
importance <- varImp(rfAll)
importance$importance>45
test <- names(training)[1:10]
test
fitTest <- train(data=training,classe~test,method="rf",na.action=na.omit)
test
dep <- paste(test,sep=" + ")
dep
dep <- paste(test,collapse=" + ")
dep
fml <- paste0("classe ~ ",dep)
fml
form <- formula(fml)
form
fittest <- train(data=training,form,method="rf",na.action=na.omit)
i <- importance$importance>45
i[1]
names(i)
row.names(i)
row.names(i)[i]
i
View(i)
View(names(training))
important_variables <- names(training)[varImp(rfAll)$importance>45]
length(important_variables)
important_variables <- names(training)[varImp(rfAll)$importance>40]
length(important_variables)
fml <- formula(paste0("classe ~ ",pase(important_variables,collapse=" + ")))
fml <- formula(paste0("classe ~ ",parse(important_variables,collapse=" + ")))
d <- parse(important_variables,collapse=" + ")
important_variables
paste(important_variables,collapse=" + ")
fml <- formula(paste0("classe ~ ",paste(important_variables,collapse=" + ")))
important_variables <- names(training)[varImp(rfAll)$importance>40]
fml <- formula(paste0("classe ~ ",paste(important_variables,collapse=" + ")))
fml
rfImportant <- train(data=train,fml,method="rf",na.action=na.omit)
important_variables
length(varImp(rfAll)$importance)
varImp(rfAll)$importance
nrow(.Last.value)
important_variables <- names(training[,-144])[varImp(rfAll)$importance>40]
fml <- formula(paste0("classe ~ ",paste(important_variables,collapse=" + ")))
rfImportant <- train(data=train,fml,method="rf",na.action=na.omit)
predAll <- predict(rfAll,vali)
sum(predAll==vali$classe)/length(vali$classe)
length(vali$classe)
lengtH(predAll)
length(predAll)
View(predAll)
View(vali)
rfImportant <- train(data=train,fml,method="rf",na.action=na.roughfix)
randomForest
library(randomForest)
?randomForest
View(testing)
predict(rfAll,testing)
?predict
rfAll
rfImportant
length(predAll)
length(predImp)
predImp <- predict(rfImportant,vali)
length(predImp)
View(predAll)
calc_acc(actual = vali$classe,
predicted = predict(rfAll, newdata = vali))
?calc_acc
valid[,important_variables]
vali[,important_variables]
View(.Last.value)
na.omit(training)
nrow(.Last.value)
View(na.omit(training))
nrow(na.omit(vali))
sum((na.omit(vali)$classe == predAll))/length(predAll)
sum((na.omit(vali[,important_variables])$classe == predImp))/length(predImp)
sum((na.omit(vali[,important_variables])$classe == predImp))
vali[,important_variables] %>% head
vali[,important_variables] %>% na.omit %>% head
vali[,important_variables] %>% na.omit %>% nrow()
sum((na.omit(vali[,c(important_variables,classe)])$classe == predImp))/length(predImp)
sum((na.omit(vali[,c(important_variables,"classe")])$classe == predImp))/length(predImp)
predAll <- predict(rfAll,vali)
predImp <- predict(rfImportant,vali)
sum((na.omit(vali)$classe == predAll))/length(predAll)
sum((na.omit(vali[,c(important_variables,"classe")])$classe == predImp))/length(predImp)
gbmImp <- train(data=training, fml,method="gbm")
rfImp <- train(data=training, fml,method="rf",na.action=na.omit)
gbmImp <- train(data=training, fml,method="gbm",na.action=na.omit)
rfPred <- predict(rfImp, newdata=training)
gbmPred <- predict(gbmImp, newdata=training)
length(rfPred)
length(gbmPred)
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=na.omit(training[,c(important_variables,"classe")]))
combinedFit <- train(data=preds,classe~rf+gbm,method="lm")
View(preds)
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=na.omit(training[,c(important_variables,"classe")]$classe))
nrow(na.omit(training[,c(important_variables,"classe")])
)
temp <- na.omit(training[,c(important_variables,"classe")]$classe
temp <- na.omit(training[,c(important_variables,"classe")])
temp <- na.omit(training[,c(important_variables,"classe")])
View(temp)
temp <- na.omit(training[,c(important_variables,"classe")])$classe
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=temp))
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=temp)
View(preds)
sum(preds$rf != preds$gbm)
sum(preds$rf != preds$classe)
na.omit(training)
nrow(na.omit(train))
combinedFit <- train(data=preds,classe~rf+gbm,method="lm")
combinedFit <- train(data=preds,classe~rf+gbm,method="rf")
?rfImpute
impTrain <- training[,c(important_variables,"classe")]
rfImpute(x=impTrain[,-c("classe")],y=impTrain$classe)
impTrain <- training[,c(important_variables,"classe")]
View(impTrain)
impTrain[,-"classe"]
impTrain[,-c("classe")]
rfImpute(x=impTrain[,-ncol(impTrain)],y=impTrain$classe)
temp <- rfImpute(x=impTrain[,-ncol(impTrain)],y=impTrain$classe)
for (k in 1:ncol(training)){
m <- mean(training[[k]],na.rm=TRUE)
training[[k]][is.na(training[[k]])] <- m
}
View(training)
nrow(na.omit(training))
for (k in 1:ncol(training[,-ncol(training)])){
m <- mean(training[[k]],na.rm=TRUE)
training[[k]][is.na(training[[k]])] <- m
}
any(is.na(training))
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- data.frame(apply(testing,2,as.numeric))
basically_empty <- function(df){
res <- c()
for (k in 1:ncol(df))
if (class(df[[k]])=="numeric"){
if (sum(df[[k]],na.rm=TRUE) == 0){
res <- c(res,k)
}
}
res
}
to_remove <- basically_empty(training)
training <- training[,-to_remove]
testing <- testing[,-to_remove]
inTrain = createDataPartition(training$classe, p = 3/4)[[1]]
train <- training[inTrain,]
vali <- training[-inTrain,]
rfAll <- train(data=train, classe~.,method="rf",na.action=na.omit)
plot(varImp(rfAll))
important_variables <- names(training[,-144])[varImp(rfAll)$importance>40]
fml <- formula(paste0("classe ~ ",paste(important_variables,collapse=" + ")))
rfImportant <- train(data=train,fml,method="rf",na.action=na.roughfix)
important_variables <- names(training[,-144])[varImp(rfAll)$importance>40]
fml <- formula(paste0("classe ~ ",paste(important_variables,collapse=" + ")))
rfImportant <- train(data=train,fml,method="rf",na.action=na.omit)
predAll <- predict(rfAll,vali)
predImp <- predict(rfImportant,vali)
sum((na.omit(vali)$classe == predAll))/length(predAll)
sum((na.omit(vali[,c(important_variables,"classe")])$classe == predImp))/length(predImp)
important_variables <- names(training[,-144])[varImp(rfAll)$importance>40]
for (k in 1:ncol(training[,-ncol(training)])){
m <- mean(training[[k]],na.rm=TRUE)
training[[k]][is.na(training[[k]])] <- m
}
rfImp <- train(data=training, fml,method="rf",na.action=na.omit)
gbmImp <- train(data=training, fml,method="gbm",na.action=na.omit,verbose=FALSE)
rfPred <- predict(rfImp, newdata=training)
gbmPred <- predict(gbmImp, newdata=training)
temp <- training$classe
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=temp)
combinedFit <- train(data=preds,classe~rf+gbm,method="rf")
View(testing)
rfTestPred <- predict(rfImp,newdata=testing)
View(predsTest)
View(testing)
rfTestPred <- predict(rfImp,newdata=testing)
rfImp
nrow(testing)
names(training)
names(testing)
names(training)==names(testing)
rfTestPred <- predict(rfImp,newdata=testing[,-ncol(testing)])
rfTestPred <- predict(rfImp,newdata=testing)
predict(rfImp)
rfFit$model
rfImp$modelInfo
rfImp$coefnames
rfImp$terms
rfImp$call
fml
?select
?subset
t <- subset(testing,select=important_variables)
predict(rfImp,newdata=t)
View(t)
length(important_variables)
fml
important_variables <- names(training[,-144])[varImp(rfAll)$importance>40]
length(important_variables)
rfAll <- train(data=training, classe~.,method="rf",na.action=na.omit)
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- data.frame(apply(testing,2,as.numeric))
basically_empty <- function(df){
res <- c()
for (k in 1:ncol(df))
if (class(df[[k]])=="numeric"){
if (sum(df[[k]],na.rm=TRUE) == 0){
res <- c(res,k)
}
}
res
}
to_remove <- basically_empty(training)
training <- training[,-to_remove]
testing <- testing[,-to_remove]
set.seed(123)
rfAll <- train(data=training, classe~.,method="rf",na.action=na.omit)
important_variables <- names(training[,-144])[varImp(rfAll)$importance>40]
important_variables <- names(training[,-144])[varImp(rfAll)$importance>40]
length(important_variables)
plot(varImp(rfAll))
important_variables <- names(training[,-144])[varImp(rfAll)$importance>25]
length(important_variables)
for (k in 1:ncol(training[,-ncol(training)])){
m <- mean(training[[k]],na.rm=TRUE)
training[[k]][is.na(training[[k]])] <- m
}
View(subset(testing,select=important_variables))
missing_in_testing <- names(testing)[basically_empty(testing)]
View(missing_in_testing)
diff(important_variables,missing_in_testing)
setdiff(important_variables,missing_in_testing)
important_variables <- names(training[,-144])[varImp(rfAll)$importance>20]
length(important_variables)
missing_in_testing <- names(testing)[basically_empty(testing)]
remaining <- setdiff(important_variables,missing_in_testing)
length(remaining)
View(testing)
remTest <- subset(testing,select=c(remaining,"problem_id"))
remTrain <- subset(training,select=c(remaining,"classe"))
for (k in 1:ncol(remTrain[,-ncol(remTrain)])){
m <- mean(remTrain[[k]],na.rm=TRUE)
remTrain[[k]][is.na(remTrain[[k]])] <- m
}
View(remTest)
any(is.na(remTest))
rfImp <- train(data=remTrain, fml,method="rf")
rfImp <-
train(data=remTrain, classe~., method="rf")
apply(training,1,is.na %>% any)
apply(training,1,function(x){any(is.na(x)})
apply(training,1,function(x){any(is.na(x))})
View(.Last.value)
library(ggplot2)
library(caret)
library(dplyr)
raw_training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
training <- raw_training[,-(1:7)]
testing <- testing[,-(1:7)]
y <- training$classe
training <- training[,-ncol(training)]
training <- data.frame(apply(training,2,as.numeric),classe=y)
testing <- data.frame(apply(testing,2,as.numeric))
basically_empty <- function(df){
res <- c()
for (k in 1:ncol(df))
if (class(df[[k]])=="numeric"){
if (sum(df[[k]],na.rm=TRUE) == 0){
res <- c(res,k)
}
}
res
}
to_remove <- basically_empty(training)
training <- training[,-to_remove]
testing <- testing[,-to_remove]
set.seed(123)
rfAll <- train(data=training, classe~.,method="rf",na.action=na.omit)
plot(varImp(rfAll))
plot(varImp(rfAll))
important_variables <- names(training[,-144])[varImp(rfAll)$importance>20]
length(important_variables)
missing_in_testing <- names(testing)[basically_empty(testing)]
remaining <- setdiff(important_variables,missing_in_testing)
length(remaining)
nrow(na.omit(remTrain))
remTest <- subset(testing,select=c(remaining,"problem_id"))
remTrain <- subset(training,select=c(remaining,"classe"))
nrow(na.omit(remTrain))
nrow(na.omit(training))
remTrain <- subset(training,select=c(remaining,"classe"))
nrow(na.omit(ttraining))
nrow(na.omit(training))
remTest <- subset(testing,select=c(remaining,"problem_id"))
nrow(na.omit(remTest))
nrow(na.omit(remTrain))
remTest <- subset(testing,select=c(remaining,"problem_id"))
remTrain <- subset(training,select=c(remaining,"classe"))
for (k in 1:ncol(remTrain[,-ncol(remTrain)])){
m <- mean(remTrain[[k]],na.rm=TRUE)
remTrain[[k]][is.na(remTrain[[k]])] <- m
}
sample(1:10,3)
?sample
set.seed(456)
train_for_rf <- remTrain[sample(1:nrow(remTrain),5000)]
set.seed(456)
train_for_rf <- remTrain[sample(1:nrow(remTrain),5000),]
train_for_gbm <- remTrain[sample(1:nrow(remTrain),5000),]
rfImp <-
train(data=remTrain, classe~., method="rf")
important_variables <- names(training[,-144])[varImp(rfAll)$importance>25]
length(important_variables)
missing_in_testing <- names(testing)[basically_empty(testing)]
remaining <- setdiff(important_variables,missing_in_testing)
length(remaining)
remTest <- subset(testing,select=c(remaining,"problem_id"))
remTrain <- subset(training,select=c(remaining,"classe"))
for (k in 1:ncol(remTrain[,-ncol(remTrain)])){
m <- mean(remTrain[[k]],na.rm=TRUE)
remTrain[[k]][is.na(remTrain[[k]])] <- m
}
set.seed(456)
train_for_rf <- remTrain[sample(1:nrow(remTrain),500),]
train_for_gbm <- remTrain[sample(1:nrow(remTrain),500),]
rfImp <-
train(data=remTrain, classe~., method="rf")
rfImp
set.seed(456)
train_for_rf <- remTrain[sample(1:nrow(remTrain),500),]
train_for_gbm <- remTrain[sample(1:nrow(remTrain),500),]
rfImp <-
train(data=remTrain, classe~., method="rf")
set.seed(456)
train_for_rf <- remTrain[sample(1:nrow(remTrain),500),]
train_for_gbm <- remTrain[sample(1:nrow(remTrain),500),]
rfImp <-
train(data=remTrain, classe~., method="rf")
important_variables <- names(training[,-144])[varImp(rfAll)$importance>30]
length(important_variables)
missing_in_testing <- names(testing)[basically_empty(testing)]
remaining <- setdiff(important_variables,missing_in_testing)
length(remaining)
remTest <- subset(testing,select=c(remaining,"problem_id"))
remTrain <- subset(training,select=c(remaining,"classe"))
for (k in 1:ncol(remTrain[,-ncol(remTrain)])){
m <- mean(remTrain[[k]],na.rm=TRUE)
remTrain[[k]][is.na(remTrain[[k]])] <- m
}
set.seed(456)
train_for_rf <- remTrain[sample(1:nrow(remTrain),500),]
train_for_gbm <- remTrain[sample(1:nrow(remTrain),500),]
rfImp <-
train(data=remTrain, classe~., method="rf")
set.seed(456)
train_for_rf <- remTrain[sample(1:nrow(remTrain),500),]
train_for_gbm <- remTrain[sample(1:nrow(remTrain),500),]
rfImp <-
train(data=train_for_rf, classe~., method="rf")
gbmImp <-
train(data=train_for_gbm, classe~., method="gbm", verbose=FALSE)
set.seed(789)
rfPred <- predict(rfImp, newdata=training)
gbmPred <- predict(gbmImp, newdata=training)
temp <- training$classe
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=temp)
combinedFit <- train(data=preds,classe~rf+gbm,method="rf")
rfTestPred <- predict(rfImp,newdata=remTest)
gbmTestPred <- predict(gbmImp,newdata=remTest)
predsTest <- data.frame(rf=rfTestPred,gbm=gbmTestPred)
combinedPred <- predict(combinedFit,newdata=predsTest)
View(combinedPred)
combinedPred
set.seed(456)
N=1000
train_for_rf <- remTrain[sample(1:nrow(remTrain),N),]
train_for_gbm <- remTrain[sample(1:nrow(remTrain),N),]
rfImp <-
train(data=train_for_rf, classe~., method="rf")
gbmImp <-
train(data=train_for_gbm, classe~., method="gbm", verbose=FALSE)
set.seed(789)
rfPred <- predict(rfImp, newdata=training)
gbmPred <- predict(gbmImp, newdata=training)
temp <- training$classe
preds <- data.frame(rf=rfPred,gbm=gbmPred,classe=temp)
combinedFit <- train(data=preds,classe~rf+gbm,method="rf")
rfTestPred <- predict(rfImp,newdata=remTest)
gbmTestPred <- predict(gbmImp,newdata=remTest)
predsTest <- data.frame(rf=rfTestPred,gbm=gbmTestPred)
combinedPred <- predict(combinedFit,newdata=predsTest)
combinedPred
git checkout master
